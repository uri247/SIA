/* Copyright (c) 2013 Ness Technologies
 *
 * Module Name:	SiaCore.cpp
 *
 * Description:	This module contains the public entries to this DLL. It contains the entry point to the DLL - DllMain, as well as
 *              the 5 famous exportable functions required for an ActiveX component. The implementation is the ATL standard mostly
 *				generated by the Visual Studio standard (with some minor tweeks).
 *              This module also contains the definition of the global _AtlModule. This is a process wide singleton, required by
 *              ATL.
 *
 * Author:		Uri London
 *
 */

#include "stdafx.h"
#include "resource.h"
#include "SiaCore_i.h"
#include "SiaCore.h"
using namespace ATL;

// Definition of the global _AtlModule. This is a process wide singleton that represents the DLL
CSiaCoreModule _AtlModule;


// DLL Entry Point
extern "C" BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpReserved)
{
	hInstance;
	return _AtlModule.DllMain(dwReason, lpReserved); 
}


STDAPI DllCanUnloadNow(void)
{
	return _AtlModule.DllCanUnloadNow();
}


STDAPI DllGetClassObject(_In_ REFCLSID rclsid, _In_ REFIID riid, _Outptr_ LPVOID* ppv)
/*
 * A standard ActiveX method. Returns a class factory to the object
 *
 */
{
	return _AtlModule.DllGetClassObject(rclsid, riid, ppv);
}

STDAPI DllRegisterServer(void)
/*
 * A standard ActiveX method. It is called once during installation of the ActiveX component, typically
 * by regsvr32.exe process, or by some other setup program.
 *
 */
{
	HRESULT hr = _AtlModule.DllRegisterServer();
	return hr;
}

STDAPI DllUnregisterServer(void)
/*
 * Cleanup registration oft he ActiveX component.
 *
 */
{
	HRESULT hr = _AtlModule.DllUnregisterServer();
	return hr;
}

STDAPI DllInstall(BOOL bInstall, _In_opt_  LPCWSTR pszCmdLine)
/*
 * The DllInstal is a "new" installation method of an ActiveX. It supports a per-user installation (which doesn't require
 * Administrator privileges). Get this function called with the following command:
 *
 *     regsvr32 /n /i:user SiaCore.dll
 *
 * Use the '/u' flag to uninstall.
 */
{
	HRESULT hr = E_FAIL;
	static const wchar_t szUserSwitch[] = L"user";

	if (pszCmdLine != NULL)
	{
		if (_wcsnicmp(pszCmdLine, szUserSwitch, _countof(szUserSwitch)) == 0)
		{
			ATL::AtlSetPerUserRegistration(true);
		}
	}

	if (bInstall)
	{	
		hr = DllRegisterServer();
		if (FAILED(hr))
		{
			DllUnregisterServer();
		}
	}
	else
	{
		hr = DllUnregisterServer();
	}

	return hr;
}


